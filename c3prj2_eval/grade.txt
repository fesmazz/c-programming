Grading at Tue Sep  8 22:23:59 UTC 2020
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==367== Memcheck, a memory error detector
==367== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==367== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==367== Command: ./test-eval inp.1.txt
==367== Parent PID: 366
==367== 
==367== Use of uninitialised value of size 8
==367==    at 0x400C01: print_hand (deck.c:9)
==367==    by 0x402AA2: describe_hand (test-eval.c:74)
==367==    by 0x402C82: main (test-eval.c:116)
==367== 
==367== Invalid read of size 8
==367==    at 0x400C01: print_hand (deck.c:9)
==367==    by 0x402AA2: describe_hand (test-eval.c:74)
==367==    by 0x402C82: main (test-eval.c:116)
==367==  Address 0xfff000870 is on thread 1's stack
==367==  240 bytes below stack pointer
==367== 
==367== Use of uninitialised value of size 8
==367==    at 0x400C01: print_hand (deck.c:9)
==367==    by 0x402AA2: describe_hand (test-eval.c:74)
==367==    by 0x402CA2: main (test-eval.c:119)
==367== 
==367== Invalid read of size 8
==367==    at 0x400C01: print_hand (deck.c:9)
==367==    by 0x402AA2: describe_hand (test-eval.c:74)
==367==    by 0x402CA2: main (test-eval.c:119)
==367==  Address 0xfff000870 is on thread 1's stack
==367==  240 bytes below stack pointer
==367== 
==367== 
==367== HEAP SUMMARY:
==367==     in use at exit: 0 bytes in 0 blocks
==367==   total heap usage: 278 allocs, 278 frees, 13,728 bytes allocated
==367== 
==367== All heap blocks were freed -- no leaks are possible
==367== 
==367== For counts of detected and suppressed errors, rerun with: -v
==367== Use --track-origins=yes to see where uninitialised values come from
==367== ERROR SUMMARY: 8 errors from 4 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==372== Memcheck, a memory error detector
==372== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==372== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==372== Command: ./test-eval inp.2.txt
==372== Parent PID: 371
==372== 
==372== Use of uninitialised value of size 8
==372==    at 0x400C01: print_hand (deck.c:9)
==372==    by 0x402AA2: describe_hand (test-eval.c:74)
==372==    by 0x402C82: main (test-eval.c:116)
==372== 
==372== Invalid read of size 8
==372==    at 0x400C01: print_hand (deck.c:9)
==372==    by 0x402AA2: describe_hand (test-eval.c:74)
==372==    by 0x402C82: main (test-eval.c:116)
==372==  Address 0x5ffffffff is not stack'd, malloc'd or (recently) free'd
==372== 
==372== 
==372== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==372==  Access not within mapped region at address 0x5FFFFFFFF
==372==    at 0x400C01: print_hand (deck.c:9)
==372==    by 0x402AA2: describe_hand (test-eval.c:74)
==372==    by 0x402C82: main (test-eval.c:116)
==372==  If you believe this happened as a result of a stack
==372==  overflow in your program's main thread (unlikely but
==372==  possible), you can try to increase the size of the
==372==  main thread stack using the --main-stacksize= flag.
==372==  The main thread stack size used in this run was 8388608.
==372== 
==372== HEAP SUMMARY:
==372==     in use at exit: 880 bytes in 17 blocks
==372==   total heap usage: 30 allocs, 13 frees, 9,320 bytes allocated
==372== 
==372== LEAK SUMMARY:
==372==    definitely lost: 0 bytes in 0 blocks
==372==    indirectly lost: 0 bytes in 0 blocks
==372==      possibly lost: 0 bytes in 0 blocks
==372==    still reachable: 880 bytes in 17 blocks
==372==         suppressed: 0 bytes in 0 blocks
==372== Rerun with --leak-check=full to see details of leaked memory
==372== 
==372== For counts of detected and suppressed errors, rerun with: -v
==372== Use --track-origins=yes to see where uninitialised values come from
==372== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==389== Memcheck, a memory error detector
==389== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==389== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==389== Command: ./test-eval inp.4.txt
==389== Parent PID: 388
==389== 
==389== Use of uninitialised value of size 8
==389==    at 0x400C01: print_hand (deck.c:9)
==389==    by 0x402AA2: describe_hand (test-eval.c:74)
==389==    by 0x402C82: main (test-eval.c:116)
==389== 
==389== Invalid read of size 8
==389==    at 0x400C01: print_hand (deck.c:9)
==389==    by 0x402AA2: describe_hand (test-eval.c:74)
==389==    by 0x402C82: main (test-eval.c:116)
==389==  Address 0x1 is not stack'd, malloc'd or (recently) free'd
==389== 
==389== 
==389== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==389==  Access not within mapped region at address 0x1
==389==    at 0x400C01: print_hand (deck.c:9)
==389==    by 0x402AA2: describe_hand (test-eval.c:74)
==389==    by 0x402C82: main (test-eval.c:116)
==389==  If you believe this happened as a result of a stack
==389==  overflow in your program's main thread (unlikely but
==389==  possible), you can try to increase the size of the
==389==  main thread stack using the --main-stacksize= flag.
==389==  The main thread stack size used in this run was 8388608.
==389== 
==389== HEAP SUMMARY:
==389==     in use at exit: 896 bytes in 18 blocks
==389==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==389== 
==389== LEAK SUMMARY:
==389==    definitely lost: 0 bytes in 0 blocks
==389==    indirectly lost: 0 bytes in 0 blocks
==389==      possibly lost: 0 bytes in 0 blocks
==389==    still reachable: 896 bytes in 18 blocks
==389==         suppressed: 0 bytes in 0 blocks
==389== Rerun with --leak-check=full to see details of leaked memory
==389== 
==389== For counts of detected and suppressed errors, rerun with: -v
==389== Use --track-origins=yes to see where uninitialised values come from
==389== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==394== Memcheck, a memory error detector
==394== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==394== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==394== Command: ./test-eval inp.5.txt
==394== Parent PID: 393
==394== 
==394== Use of uninitialised value of size 8
==394==    at 0x400C01: print_hand (deck.c:9)
==394==    by 0x402AA2: describe_hand (test-eval.c:74)
==394==    by 0x402C82: main (test-eval.c:116)
==394== 
==394== Invalid read of size 8
==394==    at 0x400C01: print_hand (deck.c:9)
==394==    by 0x402AA2: describe_hand (test-eval.c:74)
==394==    by 0x402C82: main (test-eval.c:116)
==394==  Address 0xfff000870 is on thread 1's stack
==394==  240 bytes below stack pointer
==394== 
==394== Use of uninitialised value of size 8
==394==    at 0x400C01: print_hand (deck.c:9)
==394==    by 0x402AA2: describe_hand (test-eval.c:74)
==394==    by 0x402CA2: main (test-eval.c:119)
==394== 
==394== Invalid read of size 8
==394==    at 0x400C01: print_hand (deck.c:9)
==394==    by 0x402AA2: describe_hand (test-eval.c:74)
==394==    by 0x402CA2: main (test-eval.c:119)
==394==  Address 0xfff000870 is on thread 1's stack
==394==  240 bytes below stack pointer
==394== 
==394== 
==394== HEAP SUMMARY:
==394==     in use at exit: 0 bytes in 0 blocks
==394==   total heap usage: 360 allocs, 360 frees, 15,704 bytes allocated
==394== 
==394== All heap blocks were freed -- no leaks are possible
==394== 
==394== For counts of detected and suppressed errors, rerun with: -v
==394== Use --track-origins=yes to see where uninitialised values come from
==394== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==423== Memcheck, a memory error detector
==423== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==423== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==423== Command: ./test-eval inp.8.txt
==423== Parent PID: 422
==423== 
==423== Use of uninitialised value of size 8
==423==    at 0x400C01: print_hand (deck.c:9)
==423==    by 0x402AA2: describe_hand (test-eval.c:74)
==423==    by 0x402C82: main (test-eval.c:116)
==423== 
==423== 
==423== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==423==  Bad permissions for mapped region at address 0x5000006
==423==    at 0x400C01: print_hand (deck.c:9)
==423==    by 0x402AA2: describe_hand (test-eval.c:74)
==423==    by 0x402C82: main (test-eval.c:116)
==423== 
==423== HEAP SUMMARY:
==423==     in use at exit: 896 bytes in 18 blocks
==423==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==423== 
==423== LEAK SUMMARY:
==423==    definitely lost: 0 bytes in 0 blocks
==423==    indirectly lost: 0 bytes in 0 blocks
==423==      possibly lost: 0 bytes in 0 blocks
==423==    still reachable: 896 bytes in 18 blocks
==423==         suppressed: 0 bytes in 0 blocks
==423== Rerun with --leak-check=full to see details of leaked memory
==423== 
==423== For counts of detected and suppressed errors, rerun with: -v
==423== Use --track-origins=yes to see where uninitialised values come from
==423== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Line_79_did_not_match
Line_80_did_not_match
Line_85_did_not_match
Line_88_did_not_match
Line_89_did_not_match
Line_92_did_not_match
Line_109_did_not_match
Line_110_did_not_match
Your file did not match the expected ouput
 - Output did not match, testcase failed
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 							As Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 							Kh Qh Jh 0h 9h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 9s 8s 						As Ks Qs Js 0s 9s 8s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 8h 7h 						Kh Qh Jh 0h 9h 8h 7h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Ac As Kc Ks Qs Js 0s 						Ac As Kc Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight at index 0						 - Straight at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - The most of a kind is 2 of a kind (at index 0 / value A)	 - The most of a kind is 2 of a kind (at index 0 / value A)
 - Secondary pair at index 2 (value K)				 - Secondary pair at index 2 (value K)
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Ad Kh Qh Jh Js 0h 9h 						Ad Kh Qh Jh Js 0h 9h 
 - Flush in suit h						 - Flush in suit h
 - Straight at index 0						 - Straight at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - The most of a kind is 2 of a kind (at index 3 / value J)	 - The most of a kind is 2 of a kind (at index 3 / value J)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Ah Kc 5h 4h 3h 2h 						Ah Kc 5h 4h 3h 2h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: 5h 4h 3h 2h Ah 		      |	 - 5 cards used for hand: Ah 5h 4h 3h 2h 
Hand 2:								Hand 2:
--------							--------
Ac 6c 5c 4c 3c 2c 						Ac 6c 5c 4c 3c 2c 
 - Flush in suit c						 - Flush in suit c
 - Straight flush at index 0				      |	 - Straight at index 1
 - Straight flush at index 1				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: 5c 4c 3c 2c Ac 		      |	 - 5 cards used for hand: Ac 6c 5c 4c 3c 
Comparison : 							Comparison : 
--------------							--------------
Tie							      |	Hand 2 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 							As Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
As 5s 4s 3s 2s 							As 5s 4s 3s 2s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: 5s 4s 3s 2s As 		      |	 - 5 cards used for hand: As 5s 4s 3s 2s 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==441== Memcheck, a memory error detector
==441== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==441== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==441== Command: ./test-eval inp.10.txt
==441== Parent PID: 440
==441== 
==441== Use of uninitialised value of size 8
==441==    at 0x400C01: print_hand (deck.c:9)
==441==    by 0x402AA2: describe_hand (test-eval.c:74)
==441==    by 0x402CA2: main (test-eval.c:119)
==441== 
==441== 
==441== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==441==  Bad permissions for mapped region at address 0x5000001
==441==    at 0x400C01: print_hand (deck.c:9)
==441==    by 0x402AA2: describe_hand (test-eval.c:74)
==441==    by 0x402CA2: main (test-eval.c:119)
==441== 
==441== HEAP SUMMARY:
==441==     in use at exit: 896 bytes in 18 blocks
==441==   total heap usage: 34 allocs, 16 frees, 9,424 bytes allocated
==441== 
==441== LEAK SUMMARY:
==441==    definitely lost: 0 bytes in 0 blocks
==441==    indirectly lost: 0 bytes in 0 blocks
==441==      possibly lost: 0 bytes in 0 blocks
==441==    still reachable: 896 bytes in 18 blocks
==441==         suppressed: 0 bytes in 0 blocks
==441== Rerun with --leak-check=full to see details of leaked memory
==441== 
==441== For counts of detected and suppressed errors, rerun with: -v
==441== Use --track-origins=yes to see where uninitialised values come from
==441== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
